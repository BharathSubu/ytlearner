/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/hLU0V90370X
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

"use client";

import { Button } from "@/components/ui/button";
import {
  Sheet,
  SheetTrigger,
  SheetContent, 
} from "@/components/ui/sheet";
import { Checkbox } from "@/components/ui/checkbox";
import React, { useState, useEffect, useRef, use } from "react";
import localDb from "@/lib/database.config";
import { Todo } from "@/lib/types";
import { Input } from "./ui/input";

interface SoundState {
  isPlaying: boolean;
  volume: number;
}

type Sounds = {
  rain: SoundState;
  fire: SoundState;
  wind: SoundState;
};

interface SoundState {
  isPlaying: boolean;
  volume: number;
}

const Pomodoro = () => {
  //timer logic
  const [time, setTime] = useState(1500); // 25 minutes in seconds
  const [isRunning, setIsRunning] = useState(false);
  const timerRef = useRef<NodeJS.Timeout | null>(null);
   
  useEffect(() => {
    console.log("useEffect");
  },[]);

  const handleStartStop = () => {
    if (isRunning) {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    } else {
      timerRef.current = setInterval(() => {
        setTime((prevTime) => (prevTime > 0 ? prevTime - 1 : 0));
      }, 1000);
    }
    setIsRunning(!isRunning);
  };
  
  const handleReset = () => {
    if (timerRef.current) {
      clearInterval(timerRef.current);
    }
    setIsRunning(false);
    setTime(1500); // Reset to 25 minutes
  };

  const handleIncrement = () => {
    if (!isRunning) setTime((prevTime) => prevTime + 300); // Increment by 5 minutes (300 seconds)
  };

  const handleDecrement = () => {
    if (!isRunning && time >= 300) setTime((prevTime) => prevTime - 300); // Decrement by 5 minutes (300 seconds)
  };

  //Ambience sound logic

  const [sounds, setSounds] = useState<Sounds>({
    rain: { isPlaying: false, volume: 50 },
    fire: { isPlaying: false, volume: 50 },
    wind: { isPlaying: false, volume: 50 },
  });

  const rainAudio = useRef<HTMLAudioElement >(
    new Audio("/sounds/rain.mp3")
  );
  const fireAudio = useRef<HTMLAudioElement >(
    new Audio("/sounds/fire.mp3")
  );
  const windAudio = useRef<HTMLAudioElement>(
    new Audio("/sounds/wind.mp3")
  );


  useEffect(() => {
    if (rainAudio.current) rainAudio.current.volume = sounds.rain.volume / 100;
    if (fireAudio.current) fireAudio.current.volume = sounds.fire.volume / 100;
    if (windAudio.current) windAudio.current.volume = sounds.wind.volume / 100;
  }, [sounds]);

  const handlePlayStopSound = (sound: keyof Sounds) => {
    const newSounds = { ...sounds };
    newSounds[sound].isPlaying = !newSounds[sound].isPlaying;
    console.log(newSounds[sound].isPlaying);
    if (newSounds[sound].isPlaying) {
      if (sound === "rain" && rainAudio.current) {
        rainAudio.current.loop = true;
        rainAudio.current.play();
      }
      if (sound === "fire" && fireAudio.current) {
        fireAudio.current.loop = true;
        fireAudio.current.play();
      }
      if (sound === "wind" && windAudio.current) {
        windAudio.current.loop = true;
        windAudio.current.play();
      }
    } else {
      if (sound === "rain" && rainAudio.current) rainAudio.current.pause();
      if (sound === "fire" && fireAudio.current) fireAudio.current.pause();
      if (sound === "wind" && windAudio.current) windAudio.current.pause();
    }
    console.log(newSounds);
    setSounds(newSounds);
  };

  const handleVolumeChange = (sound: keyof Sounds, volume: number) => {
    setSounds((prevSounds) => {
      const newSounds = { ...prevSounds };
      newSounds[sound].volume = volume;
      console.log(newSounds[sound].volume);
      return newSounds;
    });
  };

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${minutes < 10 ? "0" : ""}${minutes}:${
      secs < 10 ? "0" : ""
    }${secs}`;
  };

  return (
    <div>
      <Button variant="ghost" size="icon">
        <Sheet>
          <SheetTrigger asChild>
            <div className="flex items-center justify-center bg-background p-2 rounded-lg border-primary border-2 shadow-md">
                  <ClockIcon className="h-6 w-6  " />
                  {isRunning &&  formatTime(time)}  
            </div>
          </SheetTrigger>
          <SheetContent
            side="right"
            className="bg-background p-6 md:w-1/2 md:shadow-lg"
          >
            <div className="flex items-center justify-between">
              <h2 className="text-2xl font-bold">Pomodoro</h2>
            </div>

            <div className="mt-6 space-y-4">
              <div>
                <h3 className="text-lg font-medium">Timer</h3>
                <Timer
                  time={time}
                  isRunning={isRunning}
                  handleStartStop={handleStartStop}
                  handleReset={handleReset}
                  handleIncrement={handleIncrement}
                  handleDecrement={handleDecrement}
                />
                <AmbientComponent
                  sounds={sounds}
                  handlePlayStopSound={handlePlayStopSound}
                  handleVolumeChange={handleVolumeChange}
                />
              </div>
              <TodoList />
            </div>
          </SheetContent>
        </Sheet>
      </Button>
    </div>
  );
}

interface TimerProps {
  time: number;
  isRunning: boolean;
  handleStartStop: () => void;
  handleReset: () => void;
  handleIncrement: () => void;
  handleDecrement: () => void;
}

function Timer({
  time,
  isRunning,
  handleStartStop,
  handleReset,
  handleIncrement,
  handleDecrement,
}: TimerProps) {
  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${minutes < 10 ? "0" : ""}${minutes}:${
      secs < 10 ? "0" : ""
    }${secs}`;
  };

  return (
    <div className="mt-2 flex items-center justify-between">
      <div className="flex items-center gap-2">
        <ClockIcon className="h-5 w-5 text-muted-foreground" />
        <span className="text-muted-foreground">{formatTime(time)}</span>
      </div>

      <div className="flex items-center gap-2">
        <Button
          variant="ghost"
          size="icon"
          className="h-8 w-8"
          onClick={handleDecrement}
          disabled={isRunning || time < 300}
        >
          <MinusIcon className="h-4 w-4" />
          <span className="sr-only">Decrease Timer</span>
        </Button>
        <Button
          variant="ghost"
          size="icon"
          className="h-8 w-8"
          onClick={handleIncrement}
          disabled={isRunning}
        >
          <PlusIcon className="h-4 w-4" />
          <span className="sr-only">Increase Timer</span>
        </Button>
        <Button
          variant="ghost"
          size="icon"
          className="h-8 w-8"
          onClick={handleReset}
          disabled={isRunning}
        >
          <TimerResetIcon className="h-4 w-4" />
          <span className="sr-only">Reset Timer</span>
        </Button>
        <Button
          variant="outline"
          size="sm"
          className="h-8 px-3"
          onClick={handleStartStop}
        >
          {isRunning ? "Stop" : "Start"}
        </Button>
      </div>
    </div>
  );
}

const TodoList: React.FC = () => {
  const [todos, setTodos] = useState<Todo[]>([]);
  const [newTodo, setNewTodo] = useState<string>("");

  useEffect(() => {
    const fetchTodos = async () => {
      const allTodos = await localDb.table("todo").toArray();
      setTodos(allTodos);
    };
    fetchTodos();
  }, []);

  const addTodo = async () => {
    if (newTodo.trim() === "") return;
    const idIdx = await localDb
      .table("todo")
      .add({ name: newTodo, completed: false });
    setTodos(
      todos.concat({ id: idIdx as number, name: newTodo, completed: false })
    );
    // setTodos([...todos, { id : id, name: newTodo, completed: false }]);
    setNewTodo("");
  };

  const deleteTodo = async (id?: number) => {
    if (id === undefined) return;
    await localDb.table("todo").delete(id);
    setTodos(todos.filter((todo) => todo.id !== id));
  };

  const toggleCompletion = async (id?: number, completed?: boolean) => {
    if (id === undefined || completed === undefined) return;
    await localDb.table("todo").update(id, { completed: !completed });
    setTodos(
      todos.map((todo) =>
        todo.id === id ? { ...todo, completed: !completed } : todo
      )
    );
  };

  return (
    <div>
      <h3 className="text-lg font-medium">Todo List</h3>
      <div className="mt-2 flex items-center gap-2">
        <Input
          type="text"
          value={newTodo}
          onChange={(e) => setNewTodo(e.target.value)}
          placeholder="Add a new task"
          className="input-class"
        />
        <Button onClick={addTodo}>Add</Button>
      </div>
      <ul className="mt-2 space-y-3">
        {todos.map((todo) => (
          <li key={todo.id} className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Checkbox
                id={`todo-${todo.id}`}
                checked={todo.completed}
                onCheckedChange={() => toggleCompletion(todo.id, todo.completed)}
                onChange={() => toggleCompletion(todo.id, todo.completed)}
              />
              <label
                htmlFor={`todo-${todo.id}`}
                className="text-muted-foreground"
              >
                {todo.name}
              </label>
            </div>
            <Button
              variant="ghost"
              size="icon"
              className="h-6 w-6"
              onClick={() => deleteTodo(todo.id)}
            >
              <TrashIcon className="h-4 w-4" />
              <span className="sr-only">Delete</span>
            </Button>
          </li>
        ))}
      </ul>
    </div>
  );
};

interface AmbientComponentProps {
  sounds: Sounds;
  handlePlayStopSound: (sound: keyof Sounds) => void;
  handleVolumeChange: (sound: keyof Sounds, volume: number) => void;
}

const AmbientComponent: React.FC<AmbientComponentProps> = ({
  sounds,
  handlePlayStopSound,
  handleVolumeChange,
}) => {
  const rainAudio = useRef<HTMLAudioElement | null>(
    new Audio("/sounds/rain.mp3")
  );
  const fireAudio = useRef<HTMLAudioElement | null>(
    new Audio("/sounds/fire.mp3")
  );
  const windAudio = useRef<HTMLAudioElement | null>(
    new Audio("/sounds/wind.mp3")
  );

  // Your existing useEffect for volume adjustments can go here

  return (
    <div className="mt-4">
      <h4 className="text-md font-medium">Background Sounds</h4>
      <div className="mt-2 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <CloudRainIcon className="h-5 w-5 text-muted-foreground" />
          <span className="text-muted-foreground">Rain</span>
        </div>

        <div className="flex items-center gap-2">
          <input
            type="range"
            min="0"
            max="100"
            value={sounds.rain.volume}
            onChange={(e) =>
              handleVolumeChange("rain", parseInt(e.target.value))
            }
            className="w-20 h-4 bg-muted rounded-full appearance-none cursor-pointer"
          />
          <Button
            variant="outline"
            size="sm"
            className="h-8 px-3"
            onClick={() => handlePlayStopSound("rain")}
          >
            {sounds.rain.isPlaying ? "Stop" : "Play"}
          </Button>
        </div>
      </div>
      <div className="mt-2 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <FlameIcon className="h-5 w-5 text-muted-foreground" />
          <span className="text-muted-foreground">Fire</span>
        </div>
        <div className="flex items-center gap-2">
          <input
            type="range"
            min="0"
            max="100"
            value={sounds.fire.volume}
            onChange={(e) =>
              handleVolumeChange("fire", parseInt(e.target.value))
            }
            className="w-20 h-4 bg-muted rounded-full appearance-none cursor-pointer"
          />
          <Button
            variant="outline"
            size="sm"
            className="h-8 px-3"
            onClick={() => handlePlayStopSound("fire")}
          >
            {sounds.fire.isPlaying ? "Stop" : "Play"}
          </Button>
        </div>
      </div>
      <div className="mt-2 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <WindIcon className="h-5 w-5 text-muted-foreground" />
          <span className="text-muted-foreground">Wind</span>
        </div>
        <div className="flex items-center gap-2">
          <input
            type="range"
            min="0"
            max="100"
            value={sounds.wind.volume}
            onChange={(e) =>
              handleVolumeChange("wind", parseInt(e.target.value))
            }
            className="w-20 h-4 bg-muted rounded-full appearance-none cursor-pointer"
          />
          <Button
            variant="outline"
            size="sm"
            className="h-8 px-3"
            onClick={() => handlePlayStopSound("wind")}
          >
            {sounds.wind.isPlaying ? "Stop" : "Play"}
          </Button>
        </div>
      </div>
    </div>
  );
};

function ClockIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <polyline points="12 6 12 12 16 14" />
    </svg>
  );
}

function CloudRainIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242" />
      <path d="M16 14v6" />
      <path d="M8 14v6" />
      <path d="M12 16v6" />
    </svg>
  );
}

function FlameIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z" />
    </svg>
  );
}

function MenuIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <line x1="4" x2="20" y1="12" y2="12" />
      <line x1="4" x2="20" y1="6" y2="6" />
      <line x1="4" x2="20" y1="18" y2="18" />
    </svg>
  );
}

function TrashIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>
  );
}

function WindIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M17.7 7.7a2.5 2.5 0 1 1 1.8 4.3H2" />
      <path d="M9.6 4.6A2 2 0 1 1 11 8H2" />
      <path d="M12.6 19.4A2 2 0 1 0 14 16H2" />
    </svg>
  );
}

function XIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M18 6 6 18" />
      <path d="m6 6 12 12" />
    </svg>
  );
}

function MinusIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
    </svg>
  );
}

function PlusIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>
  );
}

function TimerResetIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M10 2h4" />
      <path d="M12 14v-4" />
      <path d="M4 13a8 8 0 0 1 8-7 8 8 0 1 1-5.3 14L4 17.6" />
      <path d="M9 17H4v5" />
    </svg>
  );
}

export default Pomodoro;
